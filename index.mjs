import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-improved-ziggurat@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-exp@esm/index.mjs";var j=p.isPrimitive,f=u.isPrimitive,c=g;var b=function(e,t){return!j(e)||c(e)?new TypeError("invalid argument. `mu` must be a number primitive and not `NaN`. Value: `"+e+"`."):f(t)?null:new TypeError("invalid argument. `sigma` must be a positive number. Value: `"+t+"`.")},v=h;var x=function(e,t,n){return v(t+n*e())},y=e,w=t,N=n,L=s,E=r,O=i,T=o,P=m,V=d.factory,G=a,R=l,A=b,J=x;var M=function(){var e,t,n,s,r,i,o;if(0===arguments.length)t=V();else if(1===arguments.length){if(!L(n=arguments[0]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+n+"`.");if(O(n,"prng")){if(!E(n.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+n.prng+"`.");t=V({prng:n.prng})}else t=V(n)}else{if(i=A(o=arguments[0],e=arguments[1]))throw i;if(arguments.length>2){if(!L(n=arguments[2]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+n+"`.");if(O(n,"prng")){if(!E(n.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+n.prng+"`.");t=V({prng:n.prng})}else t=V(n)}else t=V()}return r=void 0===o?j:h,s=t.PRNG,y(r,"NAME","lognormal"),n&&n.prng?(y(r,"seed",null),y(r,"seedLength",null),N(r,"state",T(null),P),y(r,"stateLength",null),y(r,"byteLength",null),y(r,"toJSON",T(null))):(w(r,"seed",m),w(r,"seedLength",d),N(r,"state",p,u),w(r,"stateLength",a),w(r,"byteLength",l),y(r,"toJSON",g)),y(r,"PRNG",s),r;function m(){return s.seed}function d(){return s.seedLength}function a(){return s.stateLength}function l(){return s.byteLength}function p(){return s.state}function u(e){s.state=e}function g(){var t={type:"PRNG"};return t.name=r.NAME,t.state=R(s.state),t.params=void 0===o?[]:[o,e],t}function h(){return J(t,o,e)}function j(e,n){return G(e)||G(n)||n<=0?NaN:J(t,e,n)}},S=M();e(S,"factory",M);var z=S;export{z as default};
